pragma language_version >= 0.14.0;

import CompactStandardLibrary;

export enum STATE { vacant, occupied }

type String = Opaque<"string">;

export ledger state: STATE;
export ledger message: Maybe<String>;
export ledger instance: Counter;
export ledger poster: Bytes<32>;

constructor() {
    state = STATE.vacant;
    message = none<String>();
    instance.increment(1);
}

witness local_secret_key(): Bytes<32>;

export circuit post(new_message: String): [] {
    assert state == STATE.vacant
        "Attempted to post to an occupied board";
    poster = disclose(public_key(local_secret_key(), instance as Field as Bytes<32>));
    message = some<String>(new_message);
    state = STATE.occupied;
}

export circuit take_down(): String {
    assert state == STATE.occupied
        "Attempted to take down post from an empty board";
    assert poster == public_key(local_secret_key(), instance as Field as Bytes<32>)
        "Attempted to take down post, but not the current poster";
    const former_msg = message.value;
    state = STATE.vacant;
    instance.increment(1);
    message = none<String>();
    return former_msg;
}

export circuit public_key(sk: Bytes<32>, instance: Bytes<32>): Bytes<32> {
    return persistent_hash<Vector<3, Bytes<32>>>([pad(32, "bboard:pk:"),
                                                  instance,
                                                  sk]);
}