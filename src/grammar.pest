SEMI_COLON  = _{ ";" }
WHITESPACE  = _{ " " | "\t" | NEWLINE }
COMMENT     =  { "//" ~ (!"\n" ~ ANY)* }

/*
    NYX SUPERSET GRAMMAR
*/

nyx_type_def = { "type" ~ ident ~ "=" ~ type_ ~ SEMI_COLON* }
// custom types must start with an uppercase letter and be followed by alphanumeric characters in lowercase
nyx_custom_type = @{ ASCII_ALPHA_UPPER{1, } ~ ("_" | ASCII_ALPHA_LOWER | ASCII_DIGIT)+ }
nyx_patterns = _{ nyx_type_def }

/*
    OFFICIAL COMPACT GRAMMAR
*/

type_list = { "<" ~ type_ ~ ("," ~ type_)* ~ ">" }
struct_type = { ident ~ type_list }
vector_length = { ASCII_DIGIT+ }
vector_type = { "Vector" ~ "<" ~ vector_length ~ "," ~ type_ ~ ">" }
type_ = { 
    "[]"
    | "Boolean" 
    | "Field" 
    | "Counter"
    | ("Uint" ~ "<" ~ ASCII_DIGIT+ ~ ">")
    | ("Uint" ~ "<" ~ ASCII_DIGIT+ ~ ".." ~ ASCII_DIGIT+ ~ ">") 
    | ("Opaque" ~ "<" ~ ("\"bytes\"" | "\"string\"") ~ ">") 
    | ("Bytes" ~ "<" ~ ASCII_DIGIT+ ~ ">") 
    | vector_type
    | "[" ~ type_ ~ ("," ~ type_) ~ "]"
    | struct_type
    | nyx_custom_type
}

// literals
uint =  @{ ASCII_DIGIT+ }
string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
tuple = { "[" ~ expr ~ ("," ~ expr)* ~ "]" }
boolean = { "true" | "false" }
lit = _{ uint | boolean | string | tuple }
comp_op = { ">=" | "<=" | ">" | "<" }

ident = @{ "_"* ~ ASCII_ALPHA+ ~ ("_" | ASCII_ALPHANUMERIC)* }
prop_access = { ident ~ "." ~ ident ~ SEMI_COLON* }
// TODO: adt_op can also have a type_list
adt_op = { ident ~ "." ~ ident ~ "(" ~ expr? ~ ("," ~ expr)* ~ ")" ~ SEMI_COLON* }
fn_call = { 
    ident 
    ~ type_list* 
    ~ "(" 
    ~ expr* ~ ("," ~ expr)* 
    ~ ")" 
    ~ SEMI_COLON* 
}

// expressions
expr_inner = _{ 
    fn_call 
    | adt_op 
    | prop_access 
    | ident
    | lit 
}
expr_as = { expr_inner ~ "as" ~ type_ ~ ("as" ~ type_)* }
expr_eq = { expr_inner ~ ("==" | "!=") ~ expr_inner }

expr = _{ expr_as | expr_eq | expr_inner }

// statements
constructor = { "constructor" ~ "(" ~ argument? ~ ("," ~ argument)* ~ ")" ~ block }

version = { ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
language_version = { 
    SOI 
    ~ "pragma" 
    ~ "language_version" 
    ~ comp_op
    ~ version 
    ~ SEMI_COLON 
}
compiler_version = { 
    SOI 
    ~ "pragma" 
    ~ "compiler_version" 
    ~ comp_op 
    ~ version 
    ~ SEMI_COLON 
}
import = { "import" ~ ident ~ SEMI_COLON }
ledger_def = { "ledger" ~ ident ~ ":" ~ (type_ | ident) ~ SEMI_COLON }
argument = { ident ~ ":" ~ type_ }
circuit_def = { 
    "circuit" 
    ~ ident 
    ~ "(" ~ argument* ~ ("," ~ argument)* ~ ")" 
    ~ ":" 
    ~ type_ 
    ~ block
}
enumdef = { "enum" ~ ident ~ "{" ~ ident ~ ("," ~ ident)* ~ "}" }
export = { "export" ~ (ledger_def | circuit_def | enumdef) }
var_assignment = { ident ~ "=" ~ expr ~ SEMI_COLON* }
// witness declaration
wdecl = { 
    "witness" 
    ~ ident 
    ~ "(" ~ argument* ~ ")" 
    ~ ":" 
    ~ type_ 
    ~ SEMI_COLON* 
}
// assert
assert = { "assert" ~ expr ~ string ~ SEMI_COLON* }
// constant
const_stmt = { "const" ~ ident ~ "=" ~ expr ~ SEMI_COLON* }
const_type_stmt = { "const" ~ ident ~ ":" ~ type_ ~ "=" ~ expr ~ SEMI_COLON* }
const = _{ const_type_stmt | const_stmt }
// return
fn_return = { "return" ~ expr ~ SEMI_COLON* }

block = { "{" ~ (statement | expr)* ~ "}" }
statement = _{ 
    language_version 
    | compiler_version 
    | import 
    | export 
    | enumdef 
    | constructor 
    | var_assignment 
    | wdecl
    | assert
    | const
    | fn_return
}

program = _{ SOI ~ "\n"* ~ (nyx_patterns | statement | expr | COMMENT)+ ~ EOI }